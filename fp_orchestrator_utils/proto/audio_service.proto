syntax = "proto3";

package audio_service;

// The AudioService defines the RPC methods for interacting with the audio processing system.
service AudioService {
  // HealthCheck is used to check the health of the audio service.
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
  // ProcessAudioPayload is used to send processed audio data from a device to the cloud storage.
  rpc ProcessAudioPayload(AudioPayload) returns (AudioPayloadResponse);
}

// The AudioPayload message contains audio data and metadata.
message AudioPayload {
  string session_id = 1;
  int32 sample_rate = 2; // Sample rate in Hz
  int32 channels = 3;
  // Feature extraction results
  AudioFeature features = 4;
  // Processing parameters
  ProcessingParameters parameters = 5;
}

message AudioFeature {
  string feature_type = 1;
  repeated int32 feature_shape = 2;
  bytes feature_data = 3; // Serialized feature data (e.g., Mel-spectrogram, MFCCs)
  FeatureParameters feature_parameters = 4; // Additional parameters for the feature extraction
  string data_type = 5; // e.g., "float32", "int16"
}

message FeatureParameters {
  int32 n_fft = 1; // Number of frequency bins
  int32 hop_length = 2;
  int32 n_mels = 3; // Number of Mel bands
  int32 f_min = 4; // Minimum frequency
  int32 f_max = 5; // Maximum frequency
  int32 target_sample_rate = 6; // Target sample rate for the feature extraction
  float power = 7; // Power scaling factor for the feature extraction
}

message ProcessingParameters {
  int32 target_sample_rate = 1;
  int32 target_length = 2; // Target length in seconds
  bool normalize = 3; // Whether audio was normalized
  string normalization_method = 4; // e.g., "min-max", "z-score"
  string trim_strategy = 5; // e.g., "none", "silence", "energy"
}

// The AudioPayloadResponse message is used to return the result of processing an audio payload.
message AudioPayloadResponse {
  string session_id = 1;
  string status = 2; // e.g., "success", "error"
  string message = 3; // Additional information about the processing result
}

// The HealthCheckRequest message is used to check the health of the audio service.
message HealthCheckRequest {}

// The HealthCheckResponse message is used to return the health status of the audio service.
message HealthCheckResponse {
  string status = 1; // e.g., "healthy", "unhealthy"
  string message = 2; // Additional information about the health status
}